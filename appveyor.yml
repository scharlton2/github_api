version: '{branch}-{build}'

skip_tags: true

# To create login to AppVeyor profile and select Account->Encrypt YAML
environment:
  scharlton2_access_token:
    secure: vrrhD2XyE3S2zhEYO2+6UyOE7CPelC5McjxZ1XmX8V3Np+mVNPevAPxwC+5cD7dM

image:
  - Visual Studio 2013

# called before clone
init:
  - ps: |
      if ($true) {
        $PSVersionTable
        Get-ChildItem env:
      }
  - echo %APPVEYOR_BUILD_WORKER_IMAGE%
  - if "%APPVEYOR_BUILD_WORKER_IMAGE%"=="Visual Studio 2017" (set GENERATOR="Visual Studio 15 2017 Win64" && set SGEN=vs2017-x64)
  - if "%APPVEYOR_BUILD_WORKER_IMAGE%"=="Visual Studio 2015" (set GENERATOR="Visual Studio 14 2015 Win64" && set SGEN=vs2015-x64)
  - if "%APPVEYOR_BUILD_WORKER_IMAGE%"=="Visual Studio 2013" (set GENERATOR="Visual Studio 12 2013 Win64" && set SGEN=vs2013-x64)
  - echo %GENERATOR%
  - echo %Configuration%
  - if "%Configuration%"=="Debug"   (set config=debug)
  - if "%Configuration%"=="Release" (set config=release)
  - set BUILD_TOOLS=OFF
  - FOR /F "tokens=3 delims= " %%i in ('echo %APPVEYOR_BUILD_WORKER_IMAGE%') do set YEAR=%%i
  - echo %YEAR%
  - ps: $UploadRelease = ($true)


# doesn't seem to be able to use environmental vars
clone_folder: C:\iricdev\lib\src\iriclib-git

configuration:
##  - Debug
  - Release

matrix:
  fast_finish: true

# Note mkdir is from Git (C:\Program Files\Git\usr\bin\mkdir.exe)
# It might give unexpected results (use md instead)
#
# Qt 5.5 only supports VS2013
before_build:
  - call "C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\vcvarsall.bat" x86_amd64

# build using cmake tools
build_script:
  - if "%Configuration%"=="Debug"   ( echo "Build Debug" )
  - ps: |
      if ($env:Configuration -match "Release") {
        # create artifact
        md libs
        Copy-Item .\appveyor.yml .\libs
        Copy-Item .\README.md .\libs
        7z a libs.zip .\libs
      }

on_success:
  - ps: |
      if ($UploadRelease) {
        # /repos/:owner/:repo/releases
        #
        $releases_url = "https://api.github.com/repos/scharlton2/github_api/releases"
        $access_token = $env:scharlton2_access_token
        
        Write-Output "`$releases_url.GetHashCode() = $($releases_url.GetHashCode())"
        Write-Output "`$access_token.GetHashCode() = $($access_token.GetHashCode())"

        # create headers dictionary
        $h = @{"Authorization" = "token $access_token"}
        Write-Output "`$h.GetHashCode() = $($h.GetHashCode())"

        # get latest release tag
        # GET /repos/:owner/:repo/releases/latest
        # see https://developer.github.com/v3/repos/releases/#get-the-latest-release
        #
        $response = Invoke-WebRequest -Uri "$releases_url/latest" -Headers $h
        Write-Output "`$response:"
        Write-Output $response

        $latest = $response.Content | ConvertFrom-Json
        Write-Output "`$latest:"
        Write-Output $latest
        Write-Output "`$latest.GetHashCode() = $($latest.GetHashCode())"

        if (! ($latest.tag_name -match "^v(?<major>0|[1-9]\d*)\.(?<minor>[0|1-9]\d*)\.(?<patch>[0|1-9]\d*)$") ) {
          # partially based on https://semver.org/
          # must be v + major.minor.patch
          throw "Bad tag"
        }

        # create release
        # POST /repos/:owner/:repo/releases
        # see https://developer.github.com/v3/repos/releases/#create-a-release
        #
        $patch = 1 + $matches["patch"]
        $create = @{
          "tag_name"         = "v" + $matches["major"] + "." + $matches["minor"] + "." + $patch;
          "target_commitish" = "$env:APPVEYOR_REPO_COMMIT";
          "name"             = "github_api " + $matches["major"] + "." + $matches["minor"] + "." + $patch
        }
        Write-Output "`$create:"
        Write-Output $create
        Write-Output "`$create.GetHashCode() = $($create.GetHashCode())"

        $create_json = $create | ConvertTo-Json
        Write-Output "`$create_json:"
        Write-Output $create_json
        Write-Output "`$create_json.GetHashCode() = $($create_json.GetHashCode())"

        $release = Invoke-WebRequest -Uri "$releases_url" -Headers $h -Method POST -Body $create_json
        Write-Output "`$release:"
        Write-Output $release
        Write-Output "`$release.GetHashCode() = $($release.GetHashCode())"

        # upload artifact (asset)
        # POST :server/repos/:owner/:repo/releases/:release_id/assets{?name,label}
        # see https://developer.github.com/v3/repos/releases/#upload-a-release-asset
        #
        $upload_uri = ($release.Content | ConvertFrom-Json).upload_url
        if (! ($upload_uri -match  "(.*)\{\?name,label\}") ) {
          # expecting URI{?name,label}
          # ie https://uploads.github.com/repos/scharlton2/iriclib/releases/24058628/assets{?name,label}
          throw "Bad upload_url"
        }
        $upload_uri = $matches[1] + "?name=libs.zip"
        $bytes = [System.IO.File]::ReadAllBytes("$env:APPVEYOR_BUILD_FOLDER\libs.zip")
        $h["Content-type"] = "application/zip"
        $upload = Invoke-WebRequest -Uri $upload_uri -Headers $h -Method POST -Body $bytes
        Write-Output "`$upload:"
        Write-Output $upload

        # display download url
        Get-FileHash .\libs.zip
        Write-Output "$(($upload.Content | ConvertFrom-Json).browser_download_url)"
      }
